"""
Project Euler Problem 2: https://projecteuler.net/problem=2

Even Fibonacci Numbers

Each new term in the Fibonacci sequence is generated by adding the previous
two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed
four million, find the sum of the even-valued terms.

References:
    - https://en.wikipedia.org/wiki/Fibonacci_number
"""
from typing import Iterator


def solution(limit: int = 4000000) -> int:
    """
    Returns the sum of all even fibonacci sequence elements that are lower
    or equal to n.

    >>> solution(10)
    10
    >>> solution(15)
    10
    >>> solution(2)
    2
    >>> solution(1)
    0
    >>> solution(34)
    44
    >>> solution()
    4613732
    """

    def fib(num: int) -> Iterator[int]:
        """
        Generator function that yields fibonacci values.
        """
        a, b = 0, 1
        while b < num:
            a, b = b, a + b
            yield b

    def is_divisible_by_2(num: int) -> bool:
        return num % 2 == 0

    return sum(val for val in fib(limit) if is_divisible_by_2(val))


if __name__ == "__main__":
    print(f"{solution() = }")
